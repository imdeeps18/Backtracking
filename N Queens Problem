package backtracking.queensProblem;

public class queen {
    public static void main(String[] args) {
        int[][] chess = new int[4][4];

        printQueensPath(chess, "", 0);
    }

    private static void printQueensPath(int[][] chess,String sb, int row) {
        if(row== chess.length){
            StringBuilder s = new StringBuilder(sb);
            s.delete(s.length()-3, s.length());
            System.out.println(s);
            return;
        }

        for(int col = 0; col< chess.length; col++){
            if(isItSafePlaceForQueen(chess, row, col)) {
                chess[row][col] = 1;
                printQueensPath(chess, sb + row + col + " - ", row + 1);
                chess[row][col] = 0;
            }
        }

    }

    private static boolean isItSafePlaceForQueen(int[][] chess, int row, int col) {

//        checking in the upper side of the required box
        for(int i=row-1; i>=0; i--){
            if(chess[i][col]==1)
                return false;
        }
//        checking in the left diagonal
        for(int i=row-1, j = col-1; i>=0 && j>=0; i--,j--){
            if(chess[i][j]==1)
                return false;
        }

//        checking in the right diagonal
        for(int i=row-1, j = col+1; i>=0 && j< chess.length; i--,j++ ){
            if(chess[i][j]==1)
                return false;
        }

        return true;
    }
}
